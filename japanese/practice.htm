<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Random Japanese Sentence Generator</title>
    <style>
        ruby {
            ruby-align: center;
        }
        rt {
            font-size: 0.5em; /* Adjust the size of the furigana text */
            color: white; /* Default color of furigana text to make it invisible */
        }
        #outputEnglish {
            display: none; /* Hide the English sentence by default */
        }
        table {
            border-collapse: collapse;
            margin-top: 20px;
            text-align: left; /* Ensure left alignment */
            width: auto; /* Ensure table width fits content */
        }
        td {
            padding: 5px;
            vertical-align: bottom; /* Bottom align the text in the table cells */
            white-space: nowrap; /* Prevent wrapping for Japanese text */
        }
        td.english {
            white-space: normal; /* Enable line wrapping for English text */
        }
        h1 {
            font-size: 2em;
            margin: 0;
        }
    </style>
</head>
<body>
    <button id="generateButton" disabled>Generate Sentence</button>
    <button id="toggleFuriganaButton">Toggle Furigana</button>
    <button id="toggleJapaneseButton">Toggle Japanese Text</button>
    <table id="outputTable">
        <tr id="outputJapanese"></tr>
        <tr id="outputEnglish"></tr>
    </table>
    <button id="revealButton">Reveal English Sentence</button>
    <button id="speakButton" disabled>Read Aloud</button>
    <label for="speedControl">Speed:</label>
    <input type="range" id="speedControl" min="0.5" max="2" step="0.1" value="1">
    <span id="speedValue">1.0</span>x
    <p id="times">20</p>

    <script>
        let noun1List = [];
        let noun2List = [];
        let verbList = [];
        let furiganaVisible = false; // Furigana is not visible by default
        let japaneseVisible = true; // Japanese text is visible by default

        // Function to load the CSV file from the URL
        function loadCSV(url) {
            fetch(url)
                .then(response => response.text())
                .then(csvData => {
                    parseCSV(csvData);
                    document.getElementById('generateButton').disabled = false; // Enable button after file is loaded
                })
                .catch(error => console.error('Error loading CSV file:', error));
        }

        // Automatically load the CSV file from the given URL
        loadCSV('https://ikarisfallen.github.io/japanese/phrases.csv');

        document.getElementById('generateButton').addEventListener('click', generateSentence);
        document.getElementById('revealButton').addEventListener('click', function() {
            document.getElementById('outputEnglish').style.display = 'table-row';
            this.style.display = 'none'; // Hide reveal button after revealing
        });
        document.getElementById('toggleFuriganaButton').addEventListener('click', toggleFurigana);
        document.getElementById('toggleJapaneseButton').addEventListener('click', toggleJapanese); // Add event listener for toggle Japanese text
        document.getElementById('speakButton').addEventListener('click', readAloud); // Add event listener for the read aloud button
        document.getElementById('speedControl').addEventListener('input', updateSpeedValue); // Add event listener for speed control

        function parseCSV(text) {
            const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
            const headers = lines[0].split(',');
            const rows = lines.slice(1).map(line => line.split(',').map(item => item.trim()));

            rows.forEach(row => {
                noun1List.push({ japanese: row[0], english: row[1] });
                noun2List.push({ japanese: row[2], english: row[3] });
                verbList.push({ japanese: row[4], english: row[5] });
            });
        }

        function convertToRuby(text) {
            return text.replace(/(\p{Script=Han}+)\(([^)]+)\)/gu, '<ruby>$1<rt>$2</rt></ruby>');
        }

        function getRandomItem(array) {
            return array[Math.floor(Math.random() * array.length)];
        }

        function generateSentence() {
            var times = parseInt(document.getElementById('times').innerHTML);
            times--;
            document.getElementById('times').innerHTML = times;

            const randomNoun1 = getRandomItem(noun1List);
            const randomNoun2 = getRandomItem(noun2List);
            const randomVerb = getRandomItem(verbList);

            const japaneseNoun1 = convertToRuby(randomNoun1.japanese) + 'は';
            const japaneseNoun2 = convertToRuby(randomNoun2.japanese) + 'を';
            const japaneseVerb = convertToRuby(randomVerb.japanese);

            const englishNoun1 = randomNoun1.english;
            const englishNoun2 = randomNoun2.english;
            const englishVerb = randomVerb.english;

            document.getElementById('outputJapanese').innerHTML = `
                <td><h1>${japaneseNoun1}</h1></td>
                <td><h1>${japaneseNoun2}</h1></td>
                <td><h1>${japaneseVerb}</h1></td>
            `;
            document.getElementById('outputEnglish').innerHTML = `
                <td class="english">${englishNoun1}</td>
                <td class="english">${englishNoun2}</td>
                <td class="english">${englishVerb}</td>
            `;

            document.getElementById('outputEnglish').style.display = 'none'; // Hide English sentence
            document.getElementById('revealButton').style.display = 'block'; // Show reveal button
            document.getElementById('speakButton').disabled = false; // Enable the speak button

            setFuriganaColor(furiganaVisible ? 'black' : 'white'); // Set furigana color based on current visibility
            setJapaneseColor(japaneseVisible ? 'black' : 'white'); // Set Japanese text color based on current visibility
        }

        function toggleFurigana() {
            furiganaVisible = !furiganaVisible; // Toggle the visibility flag
            setFuriganaColor(furiganaVisible ? 'black' : 'white');
        }

        function toggleJapanese() {
            japaneseVisible = !japaneseVisible; // Toggle the visibility flag
            setJapaneseColor(japaneseVisible ? 'black' : 'white');
        }

        function setFuriganaColor(color) {
            const furiganaElements = document.querySelectorAll('rt');
            furiganaElements.forEach(element => {
                element.style.color = color;
            });
        }

        function setJapaneseColor(color) {
            const japaneseElements = document.querySelectorAll('#outputJapanese h1, #outputJapanese ruby');
            japaneseElements.forEach(element => {
                element.style.color = color;
            });
        }

        function readAloud() {
            const utterance = new SpeechSynthesisUtterance();
            const japaneseText = getKanjiKanaOnly(); // Get kanji and kana text only
            utterance.text = japaneseText;
            utterance.lang = 'ja-JP'; // Set language to Japanese
            utterance.rate = parseFloat(document.getElementById('speedControl').value); // Set speech rate
            window.speechSynthesis.speak(utterance);
        }

        function getKanjiKanaOnly() {
            const japaneseParts = document.querySelectorAll('#outputJapanese td h1');
            let sentence = '';

            japaneseParts.forEach(part => {
                part.childNodes.forEach(node => {
                    // Read kanji and kana (but not furigana)
                    if (node.nodeType === Node.TEXT_NODE) {
                        sentence += node.nodeValue; // Normal text node
                    } else if (node.nodeName === 'RUBY') {
                        // Read only kanji and kana inside <ruby>, ignoring <rt>
                        node.childNodes.forEach(rubyChild => {
                            if (rubyChild.nodeType === Node.TEXT_NODE) {
                                sentence += rubyChild.nodeValue; // Add kanji/kana text
                            }
                        });
                    }
                });
            });

            return sentence;
        }

        function updateSpeedValue() {
            const speedValue = document.getElementById('speedControl').value;
            document.getElementById('speedValue').textContent = speedValue;
        }
    </script>
</body>
</html>
